
#line 3 "scan.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[163] =
    {   0,
        0,    0,    0,    0,    0,    0,   60,   58,    3,    4,
       11,   58,    1,   58,   18,   58,   15,   13,   14,   57,
       16,   32,   32,   10,   24,    7,   25,   57,   57,   28,
       29,   17,   57,   57,   57,   57,   57,   57,   57,   19,
       12,   11,   47,   46,   45,   47,   47,   59,   48,   59,
       53,   53,   53,   53,   53,    3,   23,    0,   43,    1,
       34,    8,    0,   43,   57,   57,   35,   35,   32,    0,
        0,    0,   20,   26,   22,   27,   21,    0,   57,   57,
       57,   57,   57,   57,    0,   57,   57,    9,   42,   23,
        0,    0,    0,   53,   53,   53,   53,   53,   53,   57,

       57,   35,   30,    0,   35,   33,    0,   57,   57,   56,
       57,   39,   57,    5,   38,   57,   57,    0,   53,   53,
       53,   49,    0,   57,   35,   31,   57,   57,   56,   41,
       57,   40,   57,   36,   44,   51,   52,   53,   35,   57,
        0,   55,    0,   37,   57,   50,   57,    0,   54,    0,
        2,   57,   54,   57,   57,   57,   57,   57,   57,   57,
        6,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,   10,    1,
        1,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   24,   23,   25,   25,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   26,   26,
       28,    1,   29,   30,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   26,   26,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   26,   51,   27,
       26,   26,    1,   52,    1,   53,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    4,    5,    5,    5,    1,    1,
        1,    1,    6,    6,    6,    4,    4,    1,    1,    1,
        4,    6,    6,    6,    6,    6,    6,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[175] =
    {   0,
        0,  424,   51,   54,   90,    0,  428,  430,  425,  430,
      405,  419,    0,    0,  415,  143,  430,  430,  430,   43,
        0,  183,   48,  430,   47,  402,   48,    0,  412,  430,
      430,  430,  388,   29,  388,   31,  417,  382,  370,  364,
      430,  394,  430,  430,  430,  196,  371,  430,  430,    0,
        0,  369,  373,  370,  367,  407,  430,  402,  401,    0,
        0,  430,  396,  395,  232,    0,  186,  210,  241,   60,
       69,    0,  430,  430,  430,  430,  430,   62,  360,  364,
      367,  360,  357,  352,   86,  168,  348,  430,    0,    0,
      211,  354,  361,    0,    0,  339,  345,  326,  315,  285,

      251,  263,  198,  207,  213,    0,  255,  305,  302,  207,
      288,    0,  286,  430,    0,  284,  297,  290,  290,  283,
      297,    0,  257,  284,  292,  430,  279,  314,  325,    0,
      290,    0,  278,    0,  430,    0,    0,  275,  303,  272,
      279,  430,  275,    0,  227,    0,  218,  308,  430,  319,
        0,  205,  430,  200,  180,  170,  174,  103,   36,   23,
        0,  430,  338,  344,  350,  352,  356,  362,  365,  369,
      375,  381,  383,  389
    } ;

static yyconst flex_int16_t yy_def[175] =
    {   0,
      162,    1,  163,  163,  162,    5,  162,  162,  162,  162,
      162,  164,  165,  166,  162,  162,  162,  162,  162,  167,
      167,  162,  162,  162,  162,  162,  162,  167,  167,  162,
      162,  162,  167,  167,  167,  167,  167,  167,  167,  162,
      162,  168,  162,  162,  162,  162,  162,  162,  162,  169,
      170,  170,  170,  170,  170,  162,  162,  164,  164,  165,
      166,  162,  171,  171,  172,  167,  167,  162,  162,  162,
      162,  173,  162,  162,  162,  162,  162,  162,  167,  167,
      167,  167,  167,  167,  162,  167,  167,  162,  168,  168,
      162,  162,  162,  170,  170,  170,  170,  170,  170,  172,

      167,  162,  162,  162,  162,  173,  162,  167,  167,  167,
      167,  167,  167,  162,  167,  167,  167,  162,  170,  170,
      170,  170,  162,  167,  167,  162,  167,  167,  162,  167,
      167,  167,  167,  167,  162,  170,  170,  170,  162,  167,
      174,  162,  162,  167,  167,  170,  167,  174,  162,  174,
      167,  167,  162,  167,  167,  167,  167,  167,  167,  167,
      167,    0,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162
    } ;

static yyconst flex_int16_t yy_nxt[484] =
    {   0,
        8,    9,   10,    8,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   23,   24,   25,
       26,   27,   28,   29,   28,   28,   28,   30,   31,   32,
       28,   33,   29,   28,   28,   34,   35,   28,   28,   28,
       28,   28,   28,   28,   36,   37,   38,   28,   39,   28,
       28,   40,   41,   44,   45,   46,   44,   45,   67,   67,
       67,   68,   80,   69,   69,   69,   73,   74,   76,   77,
       83,   81,   71,  161,   84,  103,  103,  107,  107,  160,
      104,  104,   71,   71,  105,  105,  105,   85,  114,   47,
       48,   48,   49,   48,   48,   48,   48,   48,   48,   50,

       48,   48,   48,   51,   51,   48,   48,   48,   48,   48,
       48,   48,   51,   51,   51,   51,   51,   48,   48,   48,
       51,   51,   52,   53,   51,   51,   54,   51,   51,   55,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   48,   48,   63,   63,  159,   63,   63,   63,   63,
       63,   63,   64,   63,   63,   63,   65,   65,   63,   63,
       63,   63,   63,   63,   63,   65,   65,   65,   65,   65,
       63,   63,   63,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   63,   63,   68,   91,   69,   69,

       69,   67,   67,   67,  158,  115,   70,   71,  129,   72,
      101,  157,   91,  103,  103,   70,  116,   71,   71,  156,
      101,  101,  105,  105,  105,  102,  102,  102,  105,  105,
      105,   92,   63,   63,   71,   63,   63,   63,   63,   63,
       63,   64,   63,   63,   71,   71,   92,  155,  130,  154,
       63,   63,   63,   63,   68,  152,   69,   69,   69,   63,
       63,   63,  123,  124,  126,   71,  125,  125,  125,  151,
      107,  107,  139,  139,  139,   71,   71,  142,  102,  102,
      102,  149,  150,   63,   63,   63,   63,   71,   63,   63,
       63,   63,   63,   63,   64,   63,   63,   71,   71,  125,

      125,  125,  147,   63,   63,   63,   63,  125,  125,  125,
      149,  150,   63,   63,   63,  141,  142,  143,  139,  139,
      139,  153,  150,  146,  145,  144,  129,  140,  138,  137,
      136,  135,  134,  133,  132,  131,   63,   63,   43,   43,
       43,   43,   43,   43,   58,  128,   58,   58,   58,   58,
       60,  127,   60,   60,   60,   60,   61,   61,   66,   66,
       66,   66,   89,  122,   89,   89,   89,   89,   94,  121,
       94,   95,   95,   95,   95,   63,  120,   63,   63,   63,
       63,  100,  119,  100,  100,  100,  100,  106,  106,  148,
      148,  148,  148,  148,  148,  118,   93,  117,  113,  112,

      111,  110,  109,  108,   64,   64,   59,   59,   56,   99,
       98,   97,   96,   93,   90,   88,   87,   86,   85,   82,
       79,   78,   75,   62,   59,   57,   56,  162,   42,    7,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162
    } ;

static yyconst flex_int16_t yy_chk[484] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    4,   20,   20,
       20,   23,   34,   23,   23,   23,   25,   25,   27,   27,
       36,   34,   23,  160,   36,   70,   70,   78,   78,  159,
       71,   71,   23,   23,   71,   71,   71,   85,   85,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   16,   16,  158,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   22,   46,   22,   22,

       22,   67,   67,   67,  157,   86,   22,   22,  110,   22,
       67,  156,   91,  103,  103,   22,   86,   22,   22,  155,
       67,   67,  104,  104,  104,   68,   68,   68,  105,  105,
      105,   46,   65,   65,   68,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   68,   68,   91,  154,  110,  152,
       65,   65,   65,   65,   69,  147,   69,   69,   69,   65,
       65,   65,  101,  101,  107,   69,  101,  101,  101,  145,
      107,  107,  123,  123,  123,   69,   69,  143,  102,  102,
      102,  141,  141,   65,   65,  100,  100,  102,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  102,  102,  124,

      124,  124,  140,  100,  100,  100,  100,  125,  125,  125,
      148,  148,  100,  100,  100,  128,  128,  128,  139,  139,
      139,  150,  150,  138,  133,  131,  129,  127,  121,  120,
      119,  118,  117,  116,  113,  111,  100,  100,  163,  163,
      163,  163,  163,  163,  164,  109,  164,  164,  164,  164,
      165,  108,  165,  165,  165,  165,  166,  166,  167,  167,
      167,  167,  168,   99,  168,  168,  168,  168,  169,   98,
      169,  170,  170,  170,  170,  171,   97,  171,  171,  171,
      171,  172,   96,  172,  172,  172,  172,  173,  173,  174,
      174,  174,  174,  174,  174,   93,   92,   87,   84,   83,

       82,   81,   80,   79,   64,   63,   59,   58,   56,   55,
       54,   53,   52,   47,   42,   40,   39,   38,   37,   35,
       33,   29,   26,   15,   12,   11,    9,    7,    2,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scan.ll"
#line 2 "scan.ll"

/*
   Copyright (C) 1998 T. Scott Dattalo

This file is part of gpsim.

gpsim is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

gpsim is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with gpsim; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include <stdio.h>
#include <stdlib.h>
#include <iostream>

#include <string>
#include <unistd.h>
#include <glib.h>
#ifdef _WIN32
/* declaration of isatty() */
#include <io.h>
#endif

#include "../config.h"

#include "../src/operator.h"
#include "../src/symbol.h"
#include "../src/stimuli.h"
#include "../src/processor.h"

#include "command.h"
#include "cmd_macro.h"

#include "parse.h"
#include "input.h"
#include "scan.h"

/* Since our parser is reentrant, it needs to pass us a pointer
 * to the yylval that it would like us to use */
#ifdef YY_PROTO
#define YY_DECL int yylex YY_PROTO(( YYSTYPE* yylvalP ))
#else
#define YY_DECL int yylex ( YYSTYPE* yylvalP )
#endif
extern int yyparse(void);
#define exit exit_gpsim

/* This is the max length of a line within a macro definition */
static char macroBody[65536], *macroBodyPtr=0;
static char* max_bodyPtr = &macroBody[0] + sizeof(macroBody)-1;

struct LexerStateStruct {
  struct cmd_options *options;
  command *cmd;
  int input_mode;
  int end_of_command;
  int have_parameters;
  int mode;

  struct LexerStateStruct *prev;
  struct LexerStateStruct *next;

};

static char *        m_pLastFullCommand = NULL;

void SetLastFullCommand(const char *pCmd)
{
  if (strlen(pCmd)>1) {
    if (m_pLastFullCommand)
      free (m_pLastFullCommand);
    m_pLastFullCommand = strdup(pCmd);
  }
}
const char * GetLastFullCommand()
{
  return m_pLastFullCommand;
}

static LexerStateStruct *pLexerState = 0;
static int sLevels=0;

extern int quit_parse;
extern int parser_spanning_lines;
extern int last_command_is_repeatable;

static string strip_trailing_whitespace (char *s);
static int handle_identifier(YYSTYPE* yylvalP, string &tok, cmd_options **op );
static int process_intLiteral(YYSTYPE* yylvalP, char *buffer, int conversionBase);
static int process_booleanLiteral(YYSTYPE* yylvalP, bool value);
static int process_macroBody(YYSTYPE* yylvalP, const char *text);
static int process_floatLiteral(YYSTYPE* yylvalP, char *buffer);
static int process_stringLiteral(YYSTYPE* yylvalP, const char *buffer);
static int process_quotedStringLiteral(YYSTYPE* yylvalP, char *buffer);
static int process_shellLine(YYSTYPE* yylvalP, const char *buffer);
static int recognize(int token,const char *);
static void SetMode(int newmode);

void scanPopMacroState();
int cli_corba_init (char *ior_id);

extern Macro *isMacro(const string &s);
static Macro *gCurrentMacro=0;

#define YYDEBUG 1



//========================================================================
// MacroChain class
//
//

class MacroChain
{
public:

  struct Link {
    Link *prev;
    Link *next;
    Macro *m;
  };

  MacroChain() {
    head.prev = head.next =0;
    curr = &head;
  }

  void push(Macro *m) {
    if (verbose & 4 && m) {
      cout << "Pushing " << m->name() << " onto the macro chain\n";
    }

    Link *pL = new Link();
    pL->m = m;
    pL->prev = &head;
    pL->next = head.next;
    head.next = pL;
    param = pL;
    curr = &head;
  }

  void pop()
  {
    Link *pL = head.next;
    if (pL) {

      if (verbose & 4 && pL->m) {
        cout << "Popping " << pL->m->name() << " from the macro chain\n";
      }

      head.next = pL->next;
      if (pL->next)
        pL->next->prev = &head;
      delete pL;
    }
  }

  Macro *nextParamSource()
  {
    if (curr)
      curr = curr->next;
    if (verbose & 4 && curr && curr->m ) {
      cout << " selecting parameter source " << curr->m->name() << endl;
    }
    if(curr)
      return curr->m;
    return 0;
  }
  void popParamSource()
  {
    if (verbose & 4 && curr && curr->m ) {
      cout << " popping parameter source " << curr->m->name() << endl;
    }
    if (curr)
      curr = curr->prev;
  }

  void resetParamSource()
  {
    if (verbose & 4) {
      cout << " resetparameter source\n";
    }
    curr = &head;
  }

private:
  Link *curr;
  Link head;
  Link *param;
};

static MacroChain theMacroChain;



#line 236 "scan.ll"
/* Lexer States */


#line 242 "scan.ll"
//************************************************************************
//************************************************************************
#line 826 "scan.cc"

#define INITIAL 0
#define MACROBODY 1
#define DECLARATION 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 246 "scan.ll"



// Comments. Ignore all text after a comment character


#line 1020 "scan.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 163 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 430 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 252 "scan.ll"

	YY_BREAK

case 2:
YY_RULE_SETUP
#line 254 "scan.ll"
recognize(COMMENT_T,"comment");
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 258 "scan.ll"
{   /* ignore white space */ }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 260 "scan.ll"
{
      if(verbose)
          cout << "got EOL\n";

      pLexerState->input_mode = 0;  // assume that this is not a multi-line command.
      if(pLexerState->cmd &&
         pLexerState->cmd->can_span_lines() &&
         pLexerState->have_parameters &&
         !pLexerState->end_of_command )

        pLexerState->input_mode = CONTINUING_LINE;

      else {
        pLexerState->cmd = 0;
        return recognize(EOLN_T, " end of line");
      }
}
	YY_BREAK
{
      // Got an eol.
      if(verbose)
          cout << "got INITIAL\n";

      pLexerState->input_mode = 0;  // assume that this is not a multi-line command.
      if(pLexerState->cmd &&
         pLexerState->cmd->can_span_lines() &&
         pLexerState->have_parameters &&
         !pLexerState->end_of_command )

        pLexerState->input_mode = CONTINUING_LINE;

      //else
      //  return recognize(EOLN_T, " end of line");
    }
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 295 "scan.ll"
{ /* short cut for quiting */
      quit_parse  =1;
      return QUIT;
    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 300 "scan.ll"
{
  /* a sure way to abort a script */
   return ABORT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 305 "scan.ll"
{return(recognize(EQU_T, "="));}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 306 "scan.ll"
{return(recognize(LAND_T, "&&"));}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 307 "scan.ll"
{return(recognize(LOR_T, "||"));}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 309 "scan.ll"
{return(recognize(COLON_T, ":"));}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 310 "scan.ll"
{return(recognize(LNOT_T,"!"));}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 311 "scan.ll"
{return(recognize(ONESCOMP_T,"~"));}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 312 "scan.ll"
{return(recognize(PLUS_T,"+"));}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 313 "scan.ll"
{return(recognize(MINUS_T,"-"));}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 314 "scan.ll"
{return(recognize(MPY_T,"*"));}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 315 "scan.ll"
{return(recognize(DIV_T,"/"));}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 316 "scan.ll"
{return(recognize(XOR_T,"^"));}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 317 "scan.ll"
{return(recognize(AND_T,"&"));}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 318 "scan.ll"
{return(recognize(OR_T,"|"));}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 319 "scan.ll"
{return(recognize(SHL_T,"<<"));}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 320 "scan.ll"
{return(recognize(SHR_T,">>"));}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 322 "scan.ll"
{return(recognize(EQ_T, "=="));}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 323 "scan.ll"
{return(recognize(NE_T, "!="));}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 324 "scan.ll"
{return(recognize(LT_T, "<"));}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 325 "scan.ll"
{return(recognize(GT_T, ">"));}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 326 "scan.ll"
{return(recognize(LE_T, "<="));}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 327 "scan.ll"
{return(recognize(GE_T, ">="));}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 329 "scan.ll"
{return(recognize(INDEXERLEFT_T, "["));}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 330 "scan.ll"
{return(recognize(INDEXERRIGHT_T, "]"));}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 332 "scan.ll"
{return(process_intLiteral(yylvalP,&yytext[2], 2));}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 333 "scan.ll"
{return(process_intLiteral(yylvalP,&yytext[2], 2));}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 334 "scan.ll"
{return(process_intLiteral(yylvalP,&yytext[0], 10));}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 335 "scan.ll"
{return(process_intLiteral(yylvalP,&yytext[2], 16));}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 336 "scan.ll"
{return(process_intLiteral(yylvalP,&yytext[1], 16));}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 337 "scan.ll"
{return process_floatLiteral(yylvalP,yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 338 "scan.ll"
{return(process_booleanLiteral(yylvalP,true));}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 339 "scan.ll"
{return(process_booleanLiteral(yylvalP,false));}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 340 "scan.ll"
{return(recognize(REG_T,"reg"));}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 341 "scan.ll"
{return(recognize(GPSIMOBJECT_T, "pin")); /*return(recognize(STIMULUS_T, "pin"));*/}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 342 "scan.ll"
{return(recognize(PORT_T, "port"));}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 344 "scan.ll"
{scanPopMacroState();}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 346 "scan.ll"
{return(process_shellLine(yylvalP,&yytext[1]));}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 347 "scan.ll"
{return(process_quotedStringLiteral(yylvalP,&yytext[1]));}
	YY_BREAK

//========================================================================
// Macro processing

case 44:
YY_RULE_SETUP
#line 355 "scan.ll"
{SetMode(INITIAL); return(recognize(ENDM,"endm")); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 357 "scan.ll"
{/*discard CR's*/}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 358 "scan.ll"
{*macroBodyPtr++ = '\n';
                          *macroBodyPtr = 0;
                           macroBodyPtr = macroBody;
                           return(process_macroBody(yylvalP,macroBody));}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 364 "scan.ll"
{  *macroBodyPtr++ = *yytext;
                             if(verbose&4)
                               printf("adding [%c]\n", *yytext);
                             if (macroBodyPtr > max_bodyPtr) {
                               cout << "buffer overflow in macro definition\n";
                               exit_gpsim(0);
                             }
                         }
	YY_BREAK

//========================================================================
// Declaration Processing

case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 379 "scan.ll"
{SetMode(INITIAL); return(recognize(EOLN_T, "end of declaration")); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 380 "scan.ll"
{return recognize(DECLARE_INT_T,  "int type");   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 381 "scan.ll"
{return recognize(DECLARE_FLOAT_T,"float type"); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 382 "scan.ll"
{return recognize(DECLARE_BOOL_T, "bool type");  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 383 "scan.ll"
{return recognize(DECLARE_FLOAT_T,"char type");  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 384 "scan.ll"
{ return process_stringLiteral(yylvalP, yytext); }
	YY_BREAK


// The 'echo' command is handled by the lexer instead of the
// parser (like the other commands). All it does is just display
// the contents of yytext beyond the "echo".


case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 393 "scan.ll"
{
  fprintf(yyout,"%s",&yytext[5]);
  return recognize(EOLN_T, " end of line");

  }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 399 "scan.ll"
{
  fprintf(yyout,"\n");
  return recognize(EOLN_T, " end of line");
  }
	YY_BREAK

// Indirect register access.... this should be an expression operator.


  /*
{INDIRECT} {

  return INDIRECT;
  }
*/


// If this is a command that is spanning more than one line
// then the 'end' command will finish it.

case 56:
YY_RULE_SETUP
#line 424 "scan.ll"
{
    if (pLexerState->cmd && pLexerState->cmd->can_span_lines() ) {
      pLexerState->end_of_command = 1;
      return(END_OF_COMMAND);
    }
    printf("Warning: found \"end\" while not in multiline mode\n");
  }
	YY_BREAK

// Identifiers. These are either gpsim commands or user macros.

case 57:
YY_RULE_SETUP
#line 436 "scan.ll"
{
  string tok = strip_trailing_whitespace (yytext);

  int ret=0;
  if(strlen(tok.c_str()))
    ret = handle_identifier (yylvalP, tok, &pLexerState->options);
  else
    ret = recognize(0,"invalid identifier");

  if(ret)
    return ret;
  }
	YY_BREAK

/* Default is to recognize the character we are looking at as a single char */

case 58:
YY_RULE_SETUP
#line 453 "scan.ll"
{return(recognize(*yytext,"Single character"));}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 455 "scan.ll"
ECHO;
	YY_BREAK
#line 1515 "scan.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MACROBODY):
case YY_STATE_EOF(DECLARATION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 163 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 163 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 162);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 455 "scan.ll"



/* make it work with flex 2.5.31 */
#ifndef yytext_ptr
#define yytext_ptr yytext
#endif

#define MAX_STACK_LEVELS  16
static int input_stack_index=0;
YY_BUFFER_STATE input_stack[MAX_STACK_LEVELS];

/************************************************************************
 * yywrap()
 *
 * Revert to an old input stream if there is one. If there is not an old
 * old stream, then the lexer will try to get data from YY_INPUT which
 * is a macro that calls gpsim_read() (see scan.h).
 * An 'old' stream is one that was interrupted by a macro expansion.
 *
 */
#ifdef yywrap
#undef yywrap
#endif
int yywrap (void)
{
  if(input_stack_index) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(input_stack[--input_stack_index]);
    return 0;
  }

  return 1;
}

/************************************************************************
 * push_input_stack
 *
 * called when macros are being expanded.
 */
static void push_input_stack(void)
{
  if(input_stack_index<MAX_STACK_LEVELS)
    input_stack[input_stack_index++] = YY_CURRENT_BUFFER;
}

/************************************************************************
 *
 */
static int recognize(int token_id,const char *description)
{
  /* add optional debugging stuff here */
  if((bool)verbose && description)
    cout << "scan: " << description << endl;

  return(token_id);
}

/************************************************************************
 */
int translate_token(int tt)
{
  switch(tt)
  {
  case OPT_TT_BITFLAG:
    return recognize(BIT_FLAG,"BIT_FLAG");
  case OPT_TT_NUMERIC:
    return recognize(EXPRESSION_OPTION,"EXPRESSION_OPTION");
  case OPT_TT_STRING:
    return recognize(STRING_OPTION,"STRING_OPTION");
  case OPT_TT_SUBTYPE:
      return recognize(CMD_SUBTYPE,"CMD_SUBTYPE");
  case OPT_TT_SYMBOL:
    return recognize(SYMBOL_OPTION,"SYMBOL_OPTION");
  }

  return 0;

}

static bool bTryMacroParameterExpansion(string &s)
{

  // If we're invoking a macro, search the parameters
  string replaced;
  Macro *currentMacro = theMacroChain.nextParamSource();

  if (verbose & 4) {
    cout << "Searching for parameter named:" << s;
    if (currentMacro)
      cout << " in macro: " << currentMacro->name() << endl;
    else
      cout << " but there is no current macro\n";
  }

  if(currentMacro && currentMacro->substituteParameter(s,replaced))
    if(replaced != s) {
      if (verbose & 4)
        cout << "  -- found it and replaced it with " << replaced << endl;
      if (bTryMacroParameterExpansion (replaced))
        return true;
      push_input_stack();
      yy_scan_string(replaced.c_str());
      theMacroChain.resetParamSource();
      return true;
    }
  theMacroChain.popParamSource();
  return false;

}

/*************************************************************************
*
* handle_identifier
*
*  input   string &s
*          cmd_options **op
*  output  int
*
*  1 - If `op' is NULL, then handle identifier hasn't been called
*      for the current command that's being processed. So, the
*      the string `s' is compared to all of the valid commands.
*      If it is valid, then `op' is assigned a pointer to the
*      options associated with the command. If the string is not
*      found, then that's a syntax error and the string is ignored.
*  2 - If `op' is non-NULL, then handle_identifier has been called
*      at least once before for the command that's being processed.
*      So the string `s' is then compared to the options associated
*      with the command. If an option is not found, then the string
*      is returned to the parser (as a type STRING). This places the
*      burden of syntax checking on the parser and/or the individual
*      command.
*
*/

int handle_identifier(YYSTYPE* yylvalP, string &s, cmd_options **op )
{
  int retval = 0;

  // If no command has been found so far, then the options (*op)
  // haven't been selected either (and consequently *op is null).

  if(! *op) {


    // If the first character in the string is a ' (single quote character) then
    // this means that the user is explicitly trying to access a user defined symbol
    // (e.g. if there is variable named "help" in the user's symbol table, then the
    // only way to get access to it is by using the single quote character:
    //    'help

    if(s[0] == '\'')

      // Strip away the quote, we won't treat this as a command and the parser
      // doesn't want to know about it.

      s=s.erase(0,1);

    else {

      // Search the commands
      pLexerState->cmd = search_commands(s);
      if(pLexerState->cmd) {
        if(verbose&2)
          cout << "\n  *******\nprocessing command " << (pLexerState->cmd->name()) << "\n  token value " <<
            (pLexerState->cmd->get_token()) << "\n *******\n";

        *op = pLexerState->cmd->get_op();
        pLexerState->have_parameters = 0;
        retval = pLexerState->cmd->get_token();

        // ugh. This is problem when the parser becomes re-entrant.
        last_command_is_repeatable = pLexerState->cmd->is_repeatable();

        return recognize(retval,"good command");
      }

    }

    // Search the macros
    yylvalP->Macro_P = isMacro(s);
    if(yylvalP->Macro_P) {
      return MACROINVOCATION_T;
    }

    if (bTryMacroParameterExpansion(s))
      return 0;

  } else {

    if(verbose&2)
      cout << "search options for command '"
           << (pLexerState->cmd ? pLexerState->cmd->name() : "?")
           << "'\n";

    if (bTryMacroParameterExpansion(s))
      return 0;

    // We already have the command, so search the options.

    struct cmd_options *opt = *op;

    // We also have one or more parameters now (though they
    // may not be correct, but that's the parser's job to determine).

    pLexerState->have_parameters = 1;

    while(opt->name)
      if(strcmp(opt->name, s.c_str()) == 0) {
        if(verbose&2)
          cout << "found option '" << opt->name << "'\n";
        yylvalP->co = opt;
        return recognize(translate_token(opt->token_type),"option");
      }
      else
        opt++;
  }

  // If we get here, then the option was not found.
  // So let's check the symbols
  Processor *cpu;
  if(s[0] == '.' &&  (cpu = get_active_cpu()) != 0)
    s.insert(0,cpu->name());

  string s1(s);

  gpsimObject *obj = globalSymbolTable().find(s1);
  if(obj) {
    yylvalP->Symbol_P = obj;

    if(verbose&2)
      cout << "found symbol '" << obj->name() << "'\n";

    return recognize(SYMBOL_T,"symbol");
  }

  //cout << "didn't find it in the symbol list\n";

  // Either 1) there's a typo or 2) the command is creating
  // a new symbol or node or something along those lines.
  // In either case, let's let the parser deal with it.

  if(verbose&2)
    cout << " returning unknown string: " << s << endl;

  return process_stringLiteral(yylvalP,s.c_str());

  return 0;

}


/*****************************************************************
 * Process an integer literal.  This routine constructs the
 * YYSTYPE object.  The caller is responsible from returning the
 * LITERAL_INT_T token identifer to the parser.
 */
static int process_intLiteral(YYSTYPE* yylvalP, char *buffer, int conversionBase)
{
  char c;
  gint64 literalValue=0;
  gint64 nxtDigit;

  while (*buffer) {
    c = toupper(*buffer++);

    nxtDigit = (c) <= '9' ? c-'0' : c-'A'+10;
    if ((nxtDigit >= conversionBase) || (nxtDigit<0)) {
      /* If the next digit exceeds the base, then it's an error unless
         this is a binary conversion and the character is a single quote */
      if(!(conversionBase == 2 && c == '\''))
        literalValue = 0;
      break;
    }

    literalValue *= conversionBase;
    literalValue += nxtDigit;
  }

  yylvalP->Integer_P = new Integer(literalValue);

  return(recognize(LITERAL_INT_T,"literal int"));
}

/*****************************************************************
 *
 */
static int process_macroBody(YYSTYPE* yylvalP, const char *text)
{
  yylvalP->s = strdup(text);
  return recognize(MACROBODY_T,"macro body");
}

/*****************************************************************
 *
 */
static int process_booleanLiteral(YYSTYPE* yylvalP, bool value)
{
  yylvalP->Boolean_P = new Boolean(value);
  return(recognize(LITERAL_BOOL_T, "boolean literal"));
}


/*****************************************************************
 *
 */
static int process_floatLiteral(YYSTYPE* yylvalP, char *buffer)
{
  double floatValue;
#if 0
  errno = 0;
  floatValue = atof(buffer);

  if (errno != 0) {
    /* The conversion failed */
    throw new Error("Bad floating point literal");
  }
#else
  char *endptr=0;
  floatValue = strtod(buffer, &endptr);
  if (endptr == buffer)
    throw new Error("Bad floating point literal");
#endif

  yylvalP->Float_P = new Float(floatValue);
  return(recognize(LITERAL_FLOAT_T, "float literal"));
}


/*****************************************************************
 *
 */
static int process_stringLiteral(YYSTYPE* yylvalP, const char *buffer)
{
  yylvalP->String_P = new String(buffer);
  return(recognize(LITERAL_STRING_T, "string literal"));
}


static int process_quotedStringLiteral(YYSTYPE* yylvalP, char *buffer)
{
  char * pCloseQuote = strchr(buffer, '\"');
  if(pCloseQuote == NULL)
    pCloseQuote = strchr(buffer, '\'');
  *pCloseQuote = 0;
  yylvalP->String_P = new String(buffer);
  return(recognize(LITERAL_STRING_T, "string literal"));
}


/*****************************************************************
 *
 */
static int process_shellLine(YYSTYPE* yylvalP, const char *buffer)
{
  yylvalP->String_P = new String(buffer);
  return(recognize(SHELL, "shell line"));
}


static string
strip_trailing_whitespace (char *s)
{

  string retval = s;

  size_t pos = retval.find_first_of (" \t");

  if (pos != string::npos)
    retval.resize (pos);

  return retval;
}


//------------------------------------------------------------------------
static void SetMode(int newmode)
{
  BEGIN(newmode);
  if(pLexerState)
    pLexerState->mode = newmode;
}

void initialize_commands(void);

void init_cmd_state(void)
{

  if(pLexerState) {
    if (verbose)
      cout << "scan: clearing lexer state and flushing buffer\n";
    pLexerState->cmd = 0;
    pLexerState->options = 0;
    pLexerState->input_mode = 0;
    pLexerState->end_of_command = 0;
    pLexerState->have_parameters = 0;
    pLexerState->mode = 0;
  }

}

void FlushLexerBuffer() {
#ifdef YY_FLUSH_BUFFER
  YY_FLUSH_BUFFER;
#else
  yy_flush_buffer(YY_CURRENT_BUFFER );
#endif
}

static void pushLexerState()
{
  if(verbose)
    cout << "pushing lexer state: from level " << sLevels
         << " to " << (sLevels+1) << endl;

  sLevels++;

  LexerStateStruct  *pLS = new LexerStateStruct();

  if(pLexerState)
    pLexerState->next = pLS;

  pLS->prev = pLexerState;

  pLexerState = pLS;
  pLS->next = 0;

  init_cmd_state();
}

static void popLexerState()
{
  if(verbose)
    cout << "popping lexer state: from level " << sLevels
         << " to " << (sLevels-1) << endl;

  sLevels--;

  if(pLexerState) {

    LexerStateStruct  *pLS = pLexerState;

    pLexerState = pLS->prev;

    if(pLexerState) {
      pLexerState->next = 0;
      pLexerState->cmd = 0;
      pLexerState->options = 0;
    }
    SetMode(pLS->mode);

    delete pLS;
  }

}

int
scan_read (char *buf, unsigned max_size)
{
  static int lastRet = -1;
  // hack
  int ret = gpsim_read(buf,max_size);

  if (lastRet == ret && ret == 0) {

    *buf = '\n';
    ret = 1;
  }
  lastRet = ret;
  return ret;
}

int init_parser()
{

  pushLexerState();

  int ret = yyparse();

  popLexerState();

  return ret;

}

// Tell us what the current buffer is.

YY_BUFFER_STATE
current_buffer (void)
{
  return YY_CURRENT_BUFFER;
}

// Create a new buffer.

YY_BUFFER_STATE
create_buffer (FILE *f)
{
  return yy_create_buffer (f, YY_BUF_SIZE);
}

// Start reading a new buffer.

void
switch_to_buffer (YY_BUFFER_STATE buf)
{
  yy_switch_to_buffer (buf);
}

// Delete a buffer.

void
delete_buffer (YY_BUFFER_STATE buf)
{
  yy_delete_buffer (buf);
}

// Restore a buffer (for unwind-prot).

void
restore_input_buffer (void *buf)
{
  switch_to_buffer ((YY_BUFFER_STATE) buf);
}

// Delete a buffer (for unwind-prot).

void
delete_input_buffer (void *buf)
{
  delete_buffer ((YY_BUFFER_STATE) buf);
}
//------------------------------------------------------------------------
// called by the parser error handler.
command *getLastKnownCommand()
{
  if(pLexerState)
    return pLexerState->cmd;

  return 0;
}
//----------------------------------------
//
void lexer_setMacroBodyMode(void)
{
  macroBodyPtr = &macroBody[0];
  if(verbose&4)
    cout << "setting lexer MACROBODY mode\n";
  SetMode(MACROBODY);
}

//----------------------------------------
//
void lexer_setDeclarationMode()
{
  if(verbose&4)
    cout << "setting lexer DECLARATION mode\n";
  SetMode(DECLARATION);
}

//----------------------------------------
static bool isWhiteSpace(char c)
{
  return (c==' ' || c == '\t');
}

//----------------------------------------
// getNextMacroParameter(char *s, int l)
//
// returns true if a macro parameter can be extracted
// from yyinput buffer. If it does return true, then the
// extracted macro parameter will get copied to
// the string 's'.
//
// This routine will lexically analyze a character string
// and split it up into chunks that can be passed to a
// macro invocation. It might be possible to add a new
// lex state and do this work in the lexer...
//
// If input stream looks something like:
//
//  expression1, expression2, expression3, ...
//
// then this function will return true and copies 'expression1'
// to 's'.

static bool getNextMacroParameter(char *s, int l)
{

  char c;

  // delete all leading white space.
  do {
    c = yyinput();
  } while(isWhiteSpace(c));

  if(c==',')
    goto done;


  unput(c);

  if(!c)
    return false;

  {
    int nParen=0;
    bool bDone = false;

    do {
      c = yyinput();

      if(c == '(')
        nParen++;
      if(c == ')' && --nParen < 0 )
        bDone = true;

      if(c==',')
        break;

      if(c==0 || c=='\n' ) {
        bDone=true;
        unput(c);
      } else
        *s++ = c;
    } while(--l>0  && !bDone);
  }
done:
  *s=0;

  return true;
}

void lexer_InvokeMacro(Macro *m)
{

  if(!m)
    return;

  if(verbose &4)
    cout << "Invoking macro: " << m->name() << endl;

  theMacroChain.push(m);

  m->prepareForInvocation();

  int i=0;
  bool bValidParameter = false;
  do {

    i++;
    char s[256];

    bValidParameter = getNextMacroParameter(s,sizeof(s));

    if(bValidParameter) {
      m->add_parameter(s);

      if(verbose &4)
        cout << "macro param: " << s << endl;
    }
  } while (bValidParameter && i<m->nParameters());

  m->invoke();
}

void scanPushMacroState(Macro *m)
{
  gCurrentMacro = m;
}

void scanPopMacroState()
{

  theMacroChain.pop();
}

